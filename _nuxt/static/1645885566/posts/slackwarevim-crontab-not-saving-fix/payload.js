__NUXT_JSONP__("/posts/slackwarevim-crontab-not-saving-fix", (function(a,b,c,d,e,f,g,h,i,j,k,l,m){return {data:[{post:{slug:"slackwarevim-crontab-not-saving-fix",description:"Tutorial: How to ensure that Slackware saves the crontab when using Vim.",title:"Slackware\u002FVim crontab not saving fix.",imagesource:f,imagecredit:f,image:"2012.02.09T15:00:00_slackwarevim-crontab-not-saving-fix.jpg",createdAt:g,updatedAt:g,toc:[],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:a,value:"Hi folks!"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Off the electronics and back to Linux for a second... I was trying to reconfigure root's crontab on one of my Slackware servers, and found that when using Vim, it wouldn't save. I couldn't see any errors printed to the screen, but it silently failed, and left me with my old crontab in place. What seemed odd, was that on an Ubuntu server, it worked absolutely fine, and when using vi as the crontab editor (export EDITOR=vi && export VISUAL=vi), it also worked fine on the Slackware box. Now while vi deserves a lot of respect for being the basis for Vim, it's also a total and utter cow to use, so it wasn't an option to revert to vi."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"After a little research, the problem turned out to be thanks to Slackware's vimrc. It's set to save a backup containing the file's previous state whenever saved (and this has saved my day numerous times!). However this causes problems with crontab -e. This is described in Vim's help on crontab (:help crontab) as follows:"}]},{type:a,value:d},{type:b,tag:"blockquote",props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"        One situation where \"no\" and \"auto\" will cause problems: A program"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        that opens a file, invokes Vim to edit that file, and then tests if"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        the open file was changed (through the file descriptor) will check the"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        backup file instead of the newly created file.  \"crontab -e\" is an"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        example."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"        When a copy is made, the original file is truncated and then filled"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        with the new text.  This means that protection bits, owner and"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        symbolic links of the original file are unmodified.  The backup file"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        however, is a new file, owned by the user who edited the file.  The"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        group of the backup is set to the group of the original file.  If this"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        fails, the protection bits for the group are made the same as for"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        others."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"        When the file is renamed this is the other way around: The backup has"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        the same attributes of the original file, and the newly written file"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        is owned by the current user.  When the file was a (hard\u002Fsymbolic)"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        link, the new file will not!  That's why the \"auto\" value doesn't"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        rename when the file is a link.  The owner and group of the newly"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"        written file will be set to the same ones as the original file, but"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        the system may refuse to do this.  In that case the \"auto\" value will"},{type:b,tag:c,props:{},children:[]},{type:a,value:"\n        again not rename the file."}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"To turn off the backup file function, you can either change your vimrc if you want a permanent change, or once you're editing the file, use the following commands (press : first)..."}]},{type:a,value:d},{type:b,tag:h,props:{className:["geshifilter"]},children:[{type:a,value:d},{type:b,tag:h,props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-bash","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:b,tag:i,props:{className:[j,k,l]},children:[{type:a,value:m}]},{type:a,value:" nobackup\n"},{type:b,tag:i,props:{className:[j,k,l]},children:[{type:a,value:m}]},{type:a,value:" nowritebackup\n"}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Once you've done this, you should see that the problem goes away nicely!"}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"n00b"}]}]}]},dir:"\u002Fposts",path:"\u002Fposts\u002Fslackwarevim-crontab-not-saving-fix",extension:".md",readingStats:{text:"3 min read",minutes:2.3,time:138000,words:460},postedAgo:"11 years ago"}}],fetch:{},mutations:void 0}}("text","element","br","\n","p",null,"2012-02-09T15:00:00.000Z","div","span","token","builtin","class-name","set")));