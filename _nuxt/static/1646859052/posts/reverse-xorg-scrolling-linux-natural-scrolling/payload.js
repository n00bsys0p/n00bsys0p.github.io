__NUXT_JSONP__("/posts/reverse-xorg-scrolling-linux-natural-scrolling", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y){return {data:[{post:{slug:"reverse-xorg-scrolling-linux-natural-scrolling",description:"Configure touch screen style scrolling in Linux",title:"Reverse Xorg scrolling in Linux (\"Natural Scrolling\")",imagesource:u,imagecredit:u,image:"2011.07.26T14:00:00_reverse-xorg-scrolling-linux-natural-scrolling.jpg",createdAt:v,updatedAt:v,toc:[{depth:2,text:w}],body:{type:"root",children:[{type:b,tag:f,props:{},children:[{type:a,value:"Hey guys,"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"I found an interesting snippet of information today. In OSX Lion, scrolling is reversed, like we have seen on a lot of touch applications. I for one, find this form of scrolling much more natural than the standard method, particularly when using a laptop touchpad."}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"It is also, really easy to implement on any Linux system. I can't claim credit for this entirely. I have paraphrased the necessary Linux terminal commands from "},{type:b,tag:"a",props:{href:"https:\u002F\u002Fgithub.com\u002Fcemmanouilidis\u002Fnaturalscrolling",title:"Natural Scrolling",target:"_blank"},children:[{type:a,value:"this"}]},{type:a,value:" python app."}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"The only commands you will need are `xinput`, `grep` and `sed`. The original code used gawk to separate text fields, but I thought I'd use sed, as it gives me a chance to show you some more regex pattern matching, which I have decided will be a running theme through as many of my posts as possible."}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"The first thing to do is to extract the slave input device's xinput id. This is done using `xinput list`, and grep\u002Fsed to extract the exact number we want. Here's the command:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"xinput list "},{type:b,tag:d,props:{className:[e,p]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:d,props:{className:[e,r]},children:[{type:a,value:"egrep"}]},{type:a,value:g},{type:b,tag:d,props:{className:[e,o]},children:[{type:a,value:"\"slave.*pointer\""}]},{type:a,value:g},{type:b,tag:d,props:{className:[e,p]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:d,props:{className:[e,r]},children:[{type:a,value:"grep"}]},{type:a,value:" -v XTEST "},{type:b,tag:d,props:{className:[e,p]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:d,props:{className:[e,r]},children:[{type:a,value:"sed"}]},{type:a,value:x},{type:b,tag:d,props:{className:[e,o]},children:[{type:a,value:"'s\u002F^.*id=\u002F\u002F'"}]},{type:a,value:x},{type:b,tag:d,props:{className:[e,o]},children:[{type:a,value:"'s\u002F\\s.*$\u002F\u002F'"}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"This extracts the id number by first matching the regex \"slave.*pointer\", which means match the letters \"slave\", then anything, then the letters \"pointer\". It then makes sure that our output ignores any line which contains the characters \"XTEST\". Now it has the line it wants, it needs to extract the correct field. As I mentioned, I've used sed instead of awk (which is possibly slightly more readable - I never said my option was the better one). I use sed -e, so I can search and replace multiple regex in the order I specify. The first sed expression is to match anything from the start of the line (^.*), until it reaches the end of the characters \"id=\", and replace them with nothing (\u002F\u002F). The second sed expression starts matching at the first whitespace found (\\s), and continues on until the end of the line ($). It is not necessary to include the $, as sed will default to matching until the end of the line anyway. I have included it only for the purposes of explanation."}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Now we have our id number (in my case \"11\"), we can find out what the current input order is. For this, we use the following command, replacing {idnum} with the number we extracted before:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"xinput get-button-map "},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:s}]},{type:a,value:y},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:t}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"This will most likely output a sequence of numbers, in order. If the numbers are in order, this means that the scrolling is not reversed. What we need to do to reverse the scrolling, is reverse numbers 4 and 5, which represent the scroll wheel. We do this by using a very similar command to the one we just used. In this, replace {order} with the same sequence you saw in the output of `xinput get-button-map`, with 4 and 5's order reversed, and {idnum} with our extracted input id again:"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"xinput set-button-map "},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:s}]},{type:a,value:y},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:t}]},{type:a,value:g},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:s}]},{type:a,value:"order"},{type:b,tag:d,props:{className:[e,h]},children:[{type:a,value:t}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:"h2",props:{style:"color: red;"},children:[{type:a,value:w}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Reader "},{type:b,tag:"strong",props:{},children:[{type:a,value:"beeman"}]},{type:a,value:" pointed out another way to do this without using the {idnum} would be to use "},{type:b,tag:"em",props:{},children:[{type:a,value:"xmodmap"}]},{type:a,value:" as follows (just replace {order} with the intended order of the buttons):"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j]},children:[{type:b,tag:k,props:{className:[l,m]},children:[{type:b,tag:n,props:{},children:[{type:a,value:"xmodmap -e "},{type:b,tag:d,props:{className:[e,o]},children:[{type:a,value:"\"pointer = {order}\""}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"That's it done! Go to any application with a scroll-wheel activated scroll function, and watch it in action! To switch back, just repeat the last command with 4 and 5 back in the correct order!"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"To simplify this whole process, check out the Python code at the link I mentioned previously. You may or may not be able to use it as it is, because it uses PyGTK, and therefore KDE users will have to port it to PyKDE in order to use it. It's pretty simple as long as you have any programming experience. Even if not, I encourage you to have a look - Python's an amazing language!"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Anything you want to know in more detail, or any corrections\u002Fimprovements you would like to suggest, please direct it to the comments section, and I'll do my best to get back to you as soon as I can!"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"n00b"}]}]},dir:"\u002Fposts",path:"\u002Fposts\u002Freverse-xorg-scrolling-linux-natural-scrolling",extension:".md",readingStats:{text:"4 min read",minutes:3.47,time:208200,words:694}}}],fetch:{},mutations:void 0}}("text","element","\n","span","token","p"," ","punctuation","div","nuxt-content-highlight","pre","language-bash","line-numbers","code","string","operator","|","function","{","}",null,"2011-07-26T14:00:00.000Z","Update: 11\u002F10\u002F11"," -e ","idnum")));